Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра «Програмної інженерії» 



Звіт
до лабораторної роботи № 4
з курсу «Архітектура програмного забезпечення»







Виконав:                                                                                                   Перевірив: 
Ст. групи ПЗПІ-21-10                                              Доцент каф. ПІ Сокорчук І.П. 
Юрковський Н.Ю.








Харків 2024
Мета роботи
     
     Написати програмний код для реалізації клієнтської / frontend частини програмної системи для попереднього замовлення їжі та напоїв: створити розмітку сторінок сайту для відображення предметної області, забезпечити отримання даних з БД за допомогою API, наданих серверною частиною, застосувати стилі для представлення інформації користувачеві у найзручнішому і найпривабливішому вигляді. Передбачити локалізацію та інтернаціоналізацію інтерфейсів користувача та адміністрування.

Хід роботи

     1. Створення React-компонентів для відображення предметної області, що моделюється, реалізація бізнес-логіки.
     2. Написання для створених компонентів HTTP-запитів до API з метою отримання необхідних даних із серверної частини застосунку.
     3. Створення інтерфейсу адміністрування, забезпечення можливості створення резервних копій, відновлення бази даних за допомогою створених копій, реалізація захисту даних шляхом надання можливості управління сертифікатами.
     4. Локалізація та інтернаціоналізація користувацького інтерфейсу та інтерфейсу адміністрування.
     5. Побудова UML діаграм: діаграми прецедентів (Use Case Diagram), діаграми компонентів (Component Diagram), діаграми станів (State Diagram) та діаграми пакетів (Package Diagram).





     Для наочного відображення й розуміння дій користувача в ході використання програми було спроектовано UseCase UML діаграму 
(див. додаток А). 
     Із неї чітко видно, що акторами, які безпосередньо взаємодіють із системою, є адміністратор, який здійснює управління системою і відповідає за її працездатність, користувачі, що мають платну підписку чи безкоштовний акаунт і взаємодіють із системою для замовлення і отримання їжі, а також працівники закладів громадського харчування.
	Адміністратор має необмежений доступ до функціоналу керування системою. У його обов’язки входить створення резервних копій бази даних, її відновлення у разі припинення нормального функціонування програмного продукту, здійснення керування сертифікатами, що включає у себе відслідковування строку дії SSL-сертифікату та його оновлення у разі потреби. Та основною роботою, що здійснює даний актор, є керування даними системи. Він керує даними таблиць бази даних, а саме: додає нові дані до таблиць, редагує наявні таблиці, може видаляти зайві сутності, а також переглядати усі дані, пов’язані із таблицею і її вмістом.
	Користувач із безкоштовним акаунтом може використовувати основний функціонал, що дозволить йому отримати приготовану страву. Він може У закладі харчування у мобільному додатку відсканувати NFC-мітку, після чого отримає доступ до каталогу страв, що пропонує даний заклад харчування. Після цього є можливість переглянути усі страви, що його цікавлять, у чому може допомогти можливість фільтрації, сортування каталогу, а також функція пошуку у ньому, ознайомитися із інформацією про страви, визначити її наповнення та додати до кошику, відредагувати вміст кошику та зробити замовлення, яке буде приготовано і можна буде отримати відповідно до черги. Даний користувач має право здійснити пошук закладів харчування, що можуть приготувати вибрані ним страви і знаходяться у тій місцевості, яку він вкаже, а також знайти страви, котрі складаються із вибраних користувачем інгредієнтів, при цьому даному актору можна вибрати, скільки із вказаних інгредієнтів може бути відсутніми у складі рецепту страви.
	Користувач, що маж платну підписку, може здійснити замовлення страви онлайн на вибраний ним час, а також має привілеї при розрахування черги: він може переміститися одразу в середину черги, яка складається лише з користувачів із безкоштовною підпискою.
	Взаємодію із системою також здійснює працівник закладу харчування. Коли у апараті для приготування страви не вистачає певних інгредієнтів, від повідомляє про це і даний актор повинен поповнити запаси інгредієнтів для підтримки обслуговування системою користувачів.
     Для надання уявлення про склад програмних компонентів, з яких складається система, було створено діаграму компонентів (див. додаток Б). Із неї видно, що основним файлом, який містить розмітку і відповідає за відображення усієї необхідної інформації користувачеві, є index.html. Застосунок було розроблено у відповідності до концепції односторінкових додатків, тобто за допомогою скриптів змінюється вміст одного файлу розмітки (index.html) замість створення окремого файлу для кожної логічної сторінки сайту. 
     Відповідає за генерацію необхідного вмісту веб-сторінки файл App.js, який відслідковує поточну URL-адресу та на основі цієї інформації визначає, який із React-компонентів використати для отримання розмітки. Деякі компоненти, такі як Registration, Authorization, Catalog, Dish, DishSearcher, IngredientsForm, CateringEstablishmentSearcher використовують функціонал бібліотеки axios за допомогою компоненту RequestManager для виконання HTTP-запитів до API серверної частини. За встановлення стилів глобально відповідає файл App.css. Локалізація та інтернаціоналізація здійснюється завдяки використанню бібліотеки i18next. 
     Створені React-компоненти розподілено по пакетах, як показано на діаграмі пакетів (див. додаток В). За генерування шапки та тіла сайту відповідають окремі пакети: Header та Body відповідно. Пакет Body містить підпакети: Administration (містить компоненти сторінки адміністрування: основні, такі як кнопки для відновлення БД, створення резервних копій, оновлення сертифікатів, а також компоненти з окремими таблицями БД для здійснення керування ними), Searchers (складається із компонентів, які відповідають за пошук сутностей предметної області за обраними користувачем параметрами, наприклад, страв, закладів харчування), Catalog (компоненти, що призначені для відображення каталогу страв, які можуть бути приготовані у закладах харчування в рамках системи), Authentication (реєстрація та авторизація користувачів).
     Для опису поведінки окремо узятого об'єкта системи, насамперед реактивного (поведінка якого характеризується його реакцією на зовнішні події) було розроблено діаграму станів (див. додаток В). Детально показано такі стани користувача, як неавторизований та активний, процес переходу від одного стану до іншого. Чітко видно, в яких станах перебуває об’єкт в рамках експлуатації системи, які кроки потрібно пройти, аби перейти з одного стану в інший.
     Веб-сайт містить наступні сторінки:
     - каталог страв, що можуть бути приготовані у закладах, підключених до системи і занесених до БД. Про кожну страву виводиться така інформація, як назва, зображення, вид, популярність та короткий опис. Є можливість здійснити пошук в рамках каталогу, здійснювати фільтрацію за типом, популярністю та рейтингом. Дані можуть бути відсортовані за назвою, зростанням чи спаданням рейтингу. Фрагмент коду генерації списку страв каталогу наведено у додаток Д;
     - детальна інформація про вибрану із каталогу страву. Містить назву, зображення, інгредієнти, вартість із обраним складом інгредієнтів, вид, популярність та короткий опис. Можна переглянути відгуки та написати власний зареєстрованим користувачам;
     - сторінка пошуку страв, що можна приготувати із вибраних користувачем інгредієнтів. На сторінці присутній випадаючий список, при натисканні на елемент якого відповідний інгредієнт додається до вибраних, що також стає зрозумілим із візуального відображення списку. При повторному натисканні інгредієнт вважається невибраним. Також є поле, у якому можна вказати числове значення, що відповідає можливій кількості інгредієнтів, що можуть бути відсутніми у стравах. При натисканні на кнопку пошуку для кожної із знайдених страв у вигляді картки відображається така інформація, як назва, тип та зображення. Фрагмент коду сторінки для пошуку страв, що складаються із вказаних інгредієнтів, наведено у додаток Ж;
     - сторінка пошуку закладів, у яких можуть бути приготовані вибрані користувачем страви. Присутній випадаючий список, елементами якого є страви. При натисканні на кнопку пошуку для знайдених закладів відображається назва, його адреса та зображення;
     - сторінка реєстрації, де відвідувач може вказати свої персональні дані для входу на сайт (логін та пароль, вимоги до якого вказані на даній сторінці), аби в подальшому мати можливість за допомогою них авторизуватися;
     - сторінка авторизації, де пропонується увести логін та пароль для автентифікації на сайті;
     - сторінка адміністратора, на якій здійснюється управляння користувачами (додавання та вилучення, редагування особистих даних, відновлення паролю, налаштування прав доступу до даних) та даними з БД, які моделюють предметну область (додавання, редагування, видалення). Реалізовано функціонал, що відповідає за автоматичне створення резервних копій з інтервалом в одну годину та за запитом адміністратора (при натисканні на відповідну кнопку), відновлення БД із створеної резервної копії, експорт та імпорт даних та налаштувань, їх міграція на інші платформи. Забезпечено захист даних: адміністратор може переглянути, чи є дійсним SSL-сертифікат та оновити його у разі потреби. Після проведення кожної із вищезазначених дій з’являється повідомлення про успіх чи помилку, що сталася під час її виконання.
     Кожна сторінка сайту підтримує локалізацію та інтернаціоналізацію: створено .json-файли, які містять переклади окремих складових інтерфейсу, які використовує бібліотека i18next для відображення даних вибраною мовою (українською чи англійською). За перемикання мови відповідає кнопка в шапці сайту. Дата та час визначається у відповідності до поточного часового поясу та відображається у форматі, специфічному для вибраної мови. Створено функціонал, що дозволяє відображати масу в одиницях виміру, характерних для різних країн. Якщо мова інтерфейсу українська, маса визначається у грамах, якщо ж англійська – у фунтах. Ціна аналогічним чином відображається у доларах чи гривнях відповідно до поточних налаштувань мови, курс валют визначається HTTP-запитом до API, наданим ПриватБанком.
     Архітектура програмної системи є двошаровою однорівневою: уся система фізично розміщена на одному сервері та поділяється на два шари: шар бізнес-логіки та шар відображення даних. У шарі бізнес-логіки відбувається «розумний пошук» та обчислення ціни, конвертація даних відповідно до обраних налаштувань мови, а у шарі відображення – у зручному для сприйняття користувачем вигляді подано дані предметної області. Використовується патерн сінглтон – клас RequestManager, який створюється в єдиному екземплярі у файлі App.js та передається у властивостях дочірнім компонентам. Саме за допомогою методів даного класу відбувається генерація HTTP-запитів до серверної частини програмної системи. Фрагмент реалізації даного класу наведено у додатку Е.
     
     
     
     
     
     
     
     
     
     
     
     
     

ВИСНОВКИ

     У ході даної лабораторної роботи було розроблено клієнтську частину програмної системи: створено розмітку сторінок сайту для відображення предметної області, забезпечено отримання даних з БД за допомогою API, наданих серверною частиною, застосовано стилі для представлення інформації користувачеві у найзручнішому і найпривабливішому вигляді. Передбачено локалізацію та інтернаціоналізацію інтерфейсів користувача та адміністрування.
     Відеоролик з демонстрацією роботи програмного коду:
     https://youtu.be/KAOI-1wGR-o
     Посилання на GitHub репозиторій з джерельним кодом:
     https://github.com/NureIurkovskyiNikita/apz-pzpi-21-10-iurkovskyi-nikita/tree/main/Task4/apz-pzpi-21-10-iurkovskyi-nikita-task4
     


















Додаток А
Діаграма прецедентів


Рисунок 1 – Діаграма прецедентів розроблюваної системи






Додаток Б
Діаграма компонентів


Рисунок 2 – Діаграма компонентів












Додаток В
Діаграма пакетів


Рисунок 3 – Діаграма пакетів












Додаток Г
Діаграма станів




















         Рисунок 4 – Діаграма станів
Додаток Д
Фрагмент коду генерації списку страв у каталозі


// Генерація списку страв каталогу за обраними фільтрами
const getDishList = () => {

    return(
        <div id='catalog-dishes-container'>
            {dishesList.map(dish =>
                <Card className={
                    [getDishCardStyle.root, 
                        'catalog-card'].join(' ')}>
                    <CardHeader
                        action={
                            <div className='catalog-card-action'>
                                <Rating
                                    name="read-only"
                                    value={dish.rate}
                                    readOnly
                                />
                                <div>
                                    {
                                        dish.popularity && 
                                        <Chip
                                            label={dish.popularity}
                                            color='primary' />
                                    }
                                </div>
                            </div>
                        }
                        title={dish.name}
                        subheader={dish.type}
                    />
                    <CardContent>
                        <img src={dish.image} />
                        <Typography 
                            variant="body2"
                            color="textSecondary"
                            component="p">
                            {dish.description.slice(0, 366)}
                        </Typography>
                    </CardContent>
                </Card>
            )}
        </div>
    }
);














Додаток Е
Фрагмент реалізації класу-сінглтону


export default class RequestManager {
    constructor() {
        this.makeRequest = this.makeRequest.bind(this);
        this.makePostRequest = this.makePostRequest.bind(this);
        this.makeGetRequest = this.makeGetRequest.bind(this);
        this.getAuthHeader = this.getAuthHeader.bind(this);
    }
    makeRequest(requestMethod, apiUrl, requestHeaders, requestData) {
        return axios(
            {
                method: requestMethod,
                url: apiUrl,
                headers: requestHeaders,
                data: requestData,
            });
    }
    makePostRequest(apiUrl, requestHeaders, requestData) {
        return this.makeRequest(
            'post', apiUrl, requestHeaders, requestData);
    }
    makeGetRequest(apiUrl, requestHeaders, requestData) {
        return this.makeRequest(
            'get', apiUrl, requestHeaders, requestData);
    }
    getAuthHeader() {
        return {
            'Authorization': 'JWT ' + localStorage.getItem('fap_access')
        }
    }
}

Додаток Ж
Фрагмент коду сторінки для пошуку страв, що складаються із вказаних інгредієнтів


// Формування частини посилання для виконання GET-запиту до сервера з 
// метою отримання списку страв, що можуть бути приготовані 
// із інгредієнтів, сказаних користувачем
const getSearchDishesParams = () => {
    let params_string = '';
    for (let ingredient of ingredients) {
        if (ingredientName.includes(ingredient.name)) {
            params_string += '&0=' + ingredient.id;
        }
    }
    const maxMissedCount =
        document.getElementById('filled-number').value;
    params_string += '&1=' + maxMissedCount;
    return '?' + params_string.slice(1);
}

// Отримання списку відповідних страв із оновленням стану компоненту
const getAppropriateDishes = () => {
    const requestParams = getSearchDishesParams();
    const requestApi = process.env.REACT_APP_API_URL +
        process.env.REACT_APP_APPROPRIATE_DISHES + requestParams;
    const headers = props.requestManager.getAuthHeader();

    props.requestManager.makeGetRequest(requestApi, headers, {})
        .then(response => {
            setDishes(response.data);
        });
}
